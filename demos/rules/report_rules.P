:- compiler_options([xpp_on]).
# mode standard cpp

%#define DEBUG

#ifdef DEBUG

#mode push
#mode nostring "\""
#define DEBUG_CONTEXT(name) CURRENT_CONTEXT=name
#define DEBUG_VAR(varname) fmt_write("debug_var(%S, varname, '%S').\n", arg(CURRENT_CONTEXT, varname))
#define DEBUG_LOG(message)  fmt_write("debug_log(%S, '%S').\n", arg(CURRENT_CONTEXT, message))
#mode pop

#else

#define DEBUG_CONTEXT(name) true
#define DEBUG_VAR(varname) true
#define DEBUG_LOG(message) true

#endif

%print_source_uri(DatasetId) :-
%    import_state(SourceUri, DatasetId, _, _),
%    writeln(SourceUri).

%print_remainder_of_row(RowId, StateId, StartingColumnId) :-
%    cell(CellId, StartingColumnId, RowId),
%    content(_, CellId, _, ValueId, nil),
%    value(ValueId, ValueText),
%    fmt_write('| %s ', ValueText).

%print_row(RowId, StateId) :-
%    first_column(StateId, FirstColumnId, _),
%    print_remainder_of_row(RowId, StateId, FirstColumnId),
%    writeln('|').s

prepend_remaining_array_header(_StateId, ColumnId, Header, Header) :-
    ColumnId == nil.

prepend_remaining_array_header(StateId, ColumnId, HeaderStartingFromNextColumn, UpdatedHeader) :-
    DEBUG_CONTEXT('prepend_remaining_array_header/4'),
    DEBUG_VAR(StateId),
    column_schema_at_state(ColumnSchemaId, ColumnId, StateId),
    column_schema(ColumnSchemaId, _, _, _, ColumnName, PrevColumnId, _),
    fmt_write_string(HeaderStartingFromCurrentColumn, "| %s %s", arg(ColumnName, HeaderStartingFromNextColumn)),
    prepend_remaining_array_header(StateId, PrevColumnId, HeaderStartingFromCurrentColumn, UpdatedHeader).

array_header(StateId, CompleteHeader) :-
    DEBUG_CONTEXT('array_header/2'),
    DEBUG_VAR(StateId),
    last_column(StateId, ColumnId, _),
    prepend_remaining_array_header(StateId, ColumnId, '|', CompleteHeader),
    DEBUG_VAR(CompleteHeader).
